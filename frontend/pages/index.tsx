import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useTable } from "react-table";
import React from "react";

export default function Home() {
  const data = React.useMemo(
    () => [
      {
        title: "epic",
        artist: "bensound.com",
        time: 178,
        image: "/1.jpg",
        location: "./bensound-epic.mp3",
      },
      {
        title: "SciFi",
        artist: "bensound.com",
        time: 284,
        image: "/2.jpg",
        location: "./bensound-scifi.mp3",
      },
      {
        title: "Postive Effect",
        artist: "Marc Rebillet",
        time: 42,
        image: "/3.jpg",
        location: "./positiveEffect.mp3",
      },
    ],
    []
  ) as any;
  const columns = React.useMemo(
    () => [
      {
        Header: "#",
        // eslint-disable-next-line react/display-name
        Cell: ({ cell }: any) => (
          <div>
            <h1>{cell.row.index + 1}</h1>
          </div>
        ),
      },
      {
        Header: " ",
        accessor: "image",
        // eslint-disable-next-line react/display-name
        Cell: ({ cell }: any) => (
          <div>
            <Image
              src={cell.row.values.image}
              alt={`${cell.row.values.title}`}
              width={30}
              height={30}
            ></Image>
          </div>
        ),
      },
      {
        Header: "Title",
        // eslint-disable-next-line react/display-name
        accessor: "title",
        // eslint-disable-next-line react/display-name
        Cell: ({ cell }: any) => (
          <div>
            <p>{cell.row.values.title}</p>
            {/* <Image
              src={cell.row.values.image}
              alt={`${cell.row.values.title}`}
            ></Image> */}
          </div>
        ),
      },
      {
        Header: "Artist",
        accessor: "artist",
      },
      {
        Header: "duration",
        accessor: "time",
      },
    ],
    []
  ) as any;
  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =
    useTable({ columns, data });

  return (
    <div className={styles["main-container"]}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles["main-container"]}>
        <div className={styles["playlist-title-container"]}>
          <h2>Playlist</h2>
          <h1>PlayList Title</h1>
          <p>description</p>
          <p>playlist info summary</p>
        </div>
        <div>
          <table {...getTableProps()}>
            <thead className={styles["table-head"]}>
              {headerGroups.map((headerGroup) => {
                const { key, ...restHeaderGroupProps } =
                  headerGroup.getHeaderGroupProps();
                return (
                  <tr key={key} {...restHeaderGroupProps}>
                    {headerGroup.headers.map((column) => {
                      const { key, ...restColumn } = column.getHeaderProps();
                      return (
                        <th
                          className={styles["header"]}
                          key={key}
                          {...restColumn}
                        >
                          {column.render("Header")}
                        </th>
                      );
                    })}
                  </tr>
                );
              })}
            </thead>
            <tbody {...getTableBodyProps}>
              {rows.map((row) => {
                prepareRow(row);
                const { key, ...restRowProps } = row.getRowProps();
                return (
                  <tr
                    onDoubleClick={() => {
                      console.log("click");
                    }}
                    key={key}
                    {...restRowProps}
                  >
                    {row.cells.map((cell) => {
                      const { key, ...restCellProps } = cell.getCellProps();
                      return (
                        <td key={key} {...restCellProps}>
                          {cell.render("Cell")}
                        </td>
                      );
                    })}
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </main>
    </div>
  );
}
