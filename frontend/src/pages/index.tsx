import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useTable } from "react-table";
import React from "react";
import { Icon } from "@iconify/react";

function formatTime(seconds: number) {
  return [
    Math.floor(seconds / 60), // minutes
    Math.floor(seconds % 60), // remaining seconds
  ]
    .map((x) => x.toString())

    .map((x) => (x.length === 1 ? `0${x}` : x))
    .join(":");
}

interface Props {
  isPlaying: boolean;
  setIsPlaying: React.Dispatch<React.SetStateAction<boolean>>;
  tracks: never[];
  setTracks: React.Dispatch<React.SetStateAction<never[]>>;
  trackIndex: number;
  setTrackIndex: React.Dispatch<React.SetStateAction<number>>;
  isMobile: boolean;
  audioRef: React.MutableRefObject<HTMLAudioElement>;
}

const Home: React.FC<Props> = ({
  isPlaying,
  setIsPlaying,
  tracks,
  setTracks,
  trackIndex,
  setTrackIndex,
  isMobile,
  audioRef,
}) => {
  const data = React.useMemo(
    () => [
      {
        title: "The Business (Paul Gannon Remix)",
        artist: "Tiësto",
        time: 219,
        image: "/3.jpg",
        location: "./Tiësto - The Business (Paul Gannon Remix).mp3",
      },
      {
        title: "SciFi",
        artist: "bensound.com",
        time: 284,
        image: "/2.jpg",
        location: "./bensound-scifi.mp3",
      },
      {
        title: "Epic",
        artist: "bensound.com",
        time: 178,
        image: "/1.jpg",
        location: "./bensound-epic.mp3",
      },
      {
        title: "SciFi",
        artist: "bensound.com",
        time: 284,
        image: "/2.jpg",
        location: "./bensound-scifi.mp3",
      },
      {
        title: "The Business (Paul Gannon Remix)",
        artist: "Tiësto",
        time: 219,
        image: "/3.jpg",
        location: "./Tiësto - The Business (Paul Gannon Remix).mp3",
      },
      {
        title: "Epic",
        artist: "bensound.com",
        time: 178,
        image: "/1.jpg",
        location: "./bensound-epic.mp3",
      },
    ],
    []
  ) as any;

  const columns = React.useMemo(
    () => [
      {
        Header: "#",
        accessor: "image",
        // eslint-disable-next-line react/display-name
        Cell: ({ cell }: any) => (
          <div className={styles.indexDiv}>
            <p className={styles.text}>{cell.row.index + 1}</p>
            <div className={styles.albumArt}>
              <Image
                src={cell.row.values.image}
                alt={`${cell.row.values.title}`}
                width={50}
                height={50}
              ></Image>
            </div>
          </div>
        ),
      },
      {
        Header: "Title",
        // eslint-disable-next-line react/display-name
        accessor: "title",
        // eslint-disable-next-line react/display-name
        Cell: ({ cell }: any) => (
          <div>
            <p className={styles.title}>{cell.row.values.title}</p>
          </div>
        ),
      },
      {
        Header: "Artist",
        accessor: "artist",
        // eslint-disable-next-line react/display-name
        Cell: ({ cell }: any) => (
          <div>
            <p className={styles.text}>{cell.row.values.artist}</p>
          </div>
        ),
      },
      {
        Header: "Duration",
        accessor: "time",
        // eslint-disable-next-line react/display-name
        Cell: ({ cell }: any) => (
          <div>
            <p className={styles.text}>{formatTime(cell.row.values.time)}</p>
          </div>
        ),
      },
    ],
    []
  ) as any;
  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =
    useTable({ columns, data });

  const totalTime = data.reduce((accumulator: any, currentValue: any) => {
    return accumulator + currentValue.time;
  }, 0);

  return (
    <div
      className={
        !isMobile ? styles["main-container"] : styles["main-mobile-container"]
      }
    >
      <Head>
        <title>Spotify Clone</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className={styles["playlist-title-container"]}>
          <div className={styles["playlist-grid"]}>
            <div className={styles.playlistArt}>
              <Image src="/1.jpg" alt="playlist art" width={200} height={200} />
            </div>
            <div className={styles["playlist-info"]}>
              <h2>Playlist</h2>
              <h1 className={styles.playlistTitle}>Selected Tracks</h1>
              <p className={styles.playlistDisc}>
                A special selection of songs
              </p>
              <p className={styles.playlistDisc}>
                {data.length} songs, {formatTime(totalTime)} runtime
              </p>
            </div>
          </div>
        </div>
        <div className={styles.playContainer}>
          <div className={styles.glassDiv}>
            {tracks !== data ? (
              <Icon
                onClick={() => {
                  setTracks(data);
                  setTrackIndex(1);
                  setTrackIndex(data);
                  setTrackIndex(0);
                  setIsPlaying(true);
                }}
                className={`iconify ${styles["player-play"]}`}
                icon="bi-play-circle-fill"
              ></Icon>
            ) : tracks === data && !isPlaying ? (
              <Icon
                onClick={() => {
                  setIsPlaying(true);
                }}
                className={`iconify ${styles["player-play"]}`}
                icon="bi-play-circle-fill"
              ></Icon>
            ) : (
              <Icon
                onClick={() => {
                  setIsPlaying(false);
                  audioRef.current.pause();
                }}
                className={`iconify ${styles["player-play"]}`}
                icon="bi-pause-circle-fill"
              ></Icon>
            )}
          </div>
        </div>

        <div className={styles.tableContainer}>
          <table className={styles.table} {...getTableProps()}>
            <thead className={styles["table-head"]}>
              {headerGroups.map((headerGroup) => {
                const { key, ...restHeaderGroupProps } =
                  headerGroup.getHeaderGroupProps();
                return (
                  <tr
                    className={styles["header-row"]}
                    key={key}
                    {...restHeaderGroupProps}
                  >
                    {headerGroup.headers.map((column) => {
                      const { key, ...restColumn } = column.getHeaderProps();
                      return (
                        <th
                          className={styles["header"]}
                          key={key}
                          {...restColumn}
                        >
                          {column.render("Header")}
                        </th>
                      );
                    })}
                  </tr>
                );
              })}
            </thead>
            <tbody
              className={isMobile ? styles.tableBody : styles.deskTB}
              {...getTableBodyProps}
            >
              {rows.map((row, i) => {
                prepareRow(row);
                const { key, ...restRowProps } = row.getRowProps();
                return (
                  <tr
                    onDoubleClick={() => {
                      setTracks(data);
                      setTrackIndex(i);
                      setIsPlaying(true);
                    }}
                    className={styles["playlist-row"]}
                    key={key}
                    {...restRowProps}
                  >
                    {row.cells.map((cell) => {
                      const { key, ...restCellProps } = cell.getCellProps();
                      return (
                        <td key={key} {...restCellProps}>
                          {cell.render("Cell")}
                        </td>
                      );
                    })}
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </main>
    </div>
  );
};
export default Home;
